{
  "claude_flow_agent_tasks_v2": {
    "project": "Agentic QE Fleet",
    "version": "2.0",
    "last_updated": "2025-10-17",
    "critical_update": "Sprint 2 Memory System removed - already implemented with 15 tables",
    "total_tasks": 18,
    "total_effort_hours": 216,
    "sprints": 2,

    "swarm_configuration": {
      "topology": "hierarchical",
      "max_agents": 8,
      "coordination_strategy": "adaptive",
      "memory_store": {
        "type": "swarm",
        "database": ".aqe/swarm.db",
        "status": "ALREADY_COMPLETE",
        "tables": 15,
        "file": "src/core/memory/SwarmMemoryManager.ts",
        "lines": 1989
      }
    },

    "tasks": [
      {
        "task_id": "DEPLOY-001",
        "sprint": "sprint-1",
        "phase": "deployment-readiness",
        "title": "Fix Jest environment - process.cwd() issue",
        "description": "Fix ENOENT error affecting 46 tests (86.8% of failures) by adding jest.setup.ts with proper process.cwd() mock and updating jest.config.js with setupFilesAfterEnv.",
        "agent_type": "coder",
        "priority": "CRITICAL",
        "effort_hours": 1,
        "complexity": "low",
        "dependencies": [],
        "blocks": ["DEPLOY-002", "DEPLOY-003", "DEPLOY-004", "DEPLOY-005", "DEPLOY-006"],
        "files": [
          {
            "path": "jest.setup.ts",
            "action": "create",
            "description": "Create global Jest setup with process.cwd() mock"
          },
          {
            "path": "jest.config.js",
            "action": "update",
            "description": "Add setupFilesAfterEnv and testEnvironmentOptions"
          }
        ],
        "success_criteria": [
          "No ENOENT errors when running tests",
          "46+ tests now able to run",
          "process.cwd() returns valid path in all test contexts"
        ],
        "validation": "npm test -- --testPathPattern=\"cli.test.ts\" --verbose",
        "estimated_impact": "Unblocks 86.8% of test failures"
      },

      {
        "task_id": "DEPLOY-002",
        "sprint": "sprint-1",
        "phase": "deployment-readiness",
        "title": "Fix database mock initialization methods",
        "description": "Add missing initialize() method and complete database mock implementation for FleetManager and CLI tests.",
        "agent_type": "coder",
        "priority": "HIGH",
        "effort_hours": 1,
        "complexity": "low",
        "dependencies": ["DEPLOY-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/unit/fleet-manager.test.ts",
            "action": "update",
            "description": "Add complete database mock with initialize(), query(), close(), etc."
          },
          {
            "path": "tests/cli/advanced-commands.test.ts",
            "action": "update",
            "description": "Add database mock with compact() method"
          }
        ],
        "success_criteria": [
          "No 'database.initialize is not a function' errors",
          "Fleet manager tests pass",
          "CLI advanced commands tests pass"
        ],
        "validation": "npm test -- --testPathPattern=\"fleet-manager.test.ts|advanced-commands.test.ts\"",
        "estimated_impact": "Fixes 2 test failures"
      },

      {
        "task_id": "DEPLOY-003",
        "sprint": "sprint-1",
        "phase": "deployment-readiness",
        "title": "Fix statistical analysis floating point precision",
        "description": "Update StatisticalAnalysis tests to use toBeCloseTo() with proper precision instead of exact equality for floating point comparisons.",
        "agent_type": "coder",
        "priority": "MEDIUM",
        "effort_hours": 0.5,
        "complexity": "low",
        "dependencies": ["DEPLOY-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/unit/learning/StatisticalAnalysis.test.ts",
            "action": "update",
            "description": "Use toBeCloseTo(0.6, 2) instead of exact equality"
          }
        ],
        "success_criteria": [
          "No floating point precision errors",
          "Statistical analysis tests pass consistently"
        ],
        "validation": "npm test -- --testPathPattern=\"StatisticalAnalysis.test.ts\"",
        "estimated_impact": "Fixes 1 test failure"
      },

      {
        "task_id": "DEPLOY-004",
        "sprint": "sprint-1",
        "phase": "deployment-readiness",
        "title": "Fix agent test module import paths",
        "description": "Find correct module location for agent spawn functionality and update import path in tests/cli/agent.test.ts.",
        "agent_type": "coder",
        "priority": "HIGH",
        "effort_hours": 0.5,
        "complexity": "low",
        "dependencies": ["DEPLOY-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/cli/agent.test.ts",
            "action": "update",
            "description": "Fix import path to correct module location"
          }
        ],
        "success_criteria": [
          "No module import errors",
          "Agent CLI tests pass"
        ],
        "validation": "npm test -- --testPathPattern=\"agent.test.ts\"",
        "estimated_impact": "Fixes 1 test failure"
      },

      {
        "task_id": "DEPLOY-005",
        "sprint": "sprint-1",
        "phase": "deployment-readiness",
        "title": "Fix EventBus initialization timing issue",
        "description": "Add proper async/await handling for EventBus initialization to fix timing-related test failures.",
        "agent_type": "coder",
        "priority": "MEDIUM",
        "effort_hours": 0.5,
        "complexity": "low",
        "dependencies": ["DEPLOY-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/unit/EventBus.test.ts",
            "action": "update",
            "description": "Add await for async initialization and event propagation"
          }
        ],
        "success_criteria": [
          "No timing-related test failures",
          "EventBus tests pass consistently"
        ],
        "validation": "npm test -- --testPathPattern=\"EventBus.test.ts\"",
        "estimated_impact": "Fixes 1 test failure"
      },

      {
        "task_id": "DEPLOY-006",
        "sprint": "sprint-1",
        "phase": "deployment-readiness",
        "title": "Fix learning system test model initialization",
        "description": "Add proper ML model training before detection in FlakyTestDetector and SwarmIntegration tests.",
        "agent_type": "coder",
        "priority": "MEDIUM",
        "effort_hours": 1,
        "complexity": "medium",
        "dependencies": ["DEPLOY-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/unit/learning/FlakyTestDetector.test.ts",
            "action": "update",
            "description": "Add model training with sufficient data before detection"
          },
          {
            "path": "tests/unit/learning/SwarmIntegration.test.ts",
            "action": "update",
            "description": "Add coordinator initialization and training before detection"
          }
        ],
        "success_criteria": [
          "ML models properly initialized before tests",
          "Flaky detection tests pass with realistic data",
          "Swarm integration tests pass"
        ],
        "validation": "npm test -- --testPathPattern=\"FlakyTestDetector.test.ts|SwarmIntegration.test.ts\"",
        "estimated_impact": "Fixes 2 test failures"
      },

      {
        "task_id": "DEPLOY-007",
        "sprint": "sprint-1",
        "phase": "deployment-readiness",
        "title": "Validate test coverage meets 80%+ threshold",
        "description": "Run full test suite and coverage analysis to validate all fixes are complete and coverage meets 80%+ across all metrics.",
        "agent_type": "qe-coverage-analyzer",
        "priority": "CRITICAL",
        "effort_hours": 1,
        "complexity": "low",
        "dependencies": ["DEPLOY-001", "DEPLOY-002", "DEPLOY-003", "DEPLOY-004", "DEPLOY-005", "DEPLOY-006"],
        "blocks": [],
        "files": [],
        "success_criteria": [
          "All tests passing (0 failures)",
          "Statements coverage ≥ 80%",
          "Branches coverage ≥ 80%",
          "Functions coverage ≥ 80%",
          "Lines coverage ≥ 80%",
          "Coverage report generated successfully"
        ],
        "validation": "npm test && npm run test:coverage-safe",
        "estimated_impact": "Validates production readiness for v1.1.0"
      },

      {
        "task_id": "TEST-001",
        "sprint": "sprint-1",
        "phase": "test-infrastructure",
        "title": "Fix coverage instrumentation",
        "description": "Update jest.config.js to enable proper coverage collection and reporting. Verify transform settings and coverage thresholds.",
        "agent_type": "coder",
        "priority": "CRITICAL",
        "effort_hours": 6,
        "complexity": "medium",
        "dependencies": [],
        "blocks": [],
        "files": [
          {
            "path": "jest.config.js",
            "action": "update",
            "description": "Verify collectCoverage, collectCoverageFrom, coverageThresholds, transform settings"
          },
          {
            "path": "package.json",
            "action": "update",
            "description": "Ensure test scripts properly invoke coverage"
          }
        ],
        "success_criteria": [
          "Coverage report shows actual percentages (not 0%)",
          "Coverage HTML report generated in /coverage directory",
          "npm run test:coverage completes without errors"
        ],
        "validation": "npm run test:coverage-safe",
        "estimated_impact": "Enables accurate coverage tracking for all modules"
      },

      {
        "task_id": "TEST-002",
        "sprint": "sprint-1",
        "phase": "test-infrastructure",
        "title": "Fix EventBus initialization test",
        "description": "Fix mock logger call count expectations and ensure idempotent initialization behavior is properly tested.",
        "agent_type": "tester",
        "priority": "CRITICAL",
        "effort_hours": 4,
        "complexity": "medium",
        "dependencies": ["TEST-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/unit/EventBus.test.ts",
            "action": "update",
            "description": "Fix initialization test to handle multiple calls gracefully"
          }
        ],
        "success_criteria": [
          "Test passes consistently",
          "Idempotent initialization verified",
          "No regression in other EventBus tests"
        ],
        "validation": "npm test -- --testPathPattern=\"EventBus.test.ts\"",
        "estimated_impact": "Ensures EventBus reliability"
      },

      {
        "task_id": "TEST-003",
        "sprint": "sprint-1",
        "phase": "test-infrastructure",
        "title": "Fix FleetManager database initialization",
        "description": "Complete database mock implementation with all required methods for FleetManager tests.",
        "agent_type": "coder",
        "priority": "CRITICAL",
        "effort_hours": 6,
        "complexity": "medium",
        "dependencies": ["TEST-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/unit/fleet-manager.test.ts",
            "action": "update",
            "description": "Add comprehensive database mock with initialize(), query(), stats() methods"
          }
        ],
        "success_criteria": [
          "All FleetManager tests pass",
          "Database initialization verified",
          "Proper error handling tested"
        ],
        "validation": "npm test -- --testPathPattern=\"fleet-manager.test.ts\"",
        "estimated_impact": "Validates core fleet management functionality"
      },

      {
        "task_id": "TEST-004",
        "sprint": "sprint-1",
        "phase": "test-infrastructure",
        "title": "Fix FlakyTestDetector ML model tests",
        "description": "Use fixed seed for deterministic ML testing and improve test reliability for non-deterministic ML operations.",
        "agent_type": "tester",
        "priority": "HIGH",
        "effort_hours": 4,
        "complexity": "medium",
        "dependencies": ["TEST-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/unit/learning/FlakyTestDetector.test.ts",
            "action": "update",
            "description": "Add fixed seed (42) for reproducible ML testing"
          }
        ],
        "success_criteria": [
          "ML model tests pass consistently",
          "Deterministic behavior with fixed seed",
          "Confidence scores within expected ranges"
        ],
        "validation": "npm test -- --testPathPattern=\"FlakyTestDetector.test.ts\"",
        "estimated_impact": "Ensures ML-based flaky detection reliability"
      },

      {
        "task_id": "TEST-005",
        "sprint": "sprint-1",
        "phase": "test-infrastructure",
        "title": "Create BaseAgent edge case tests",
        "description": "Create comprehensive edge case tests for BaseAgent covering hook failures, concurrent operations, state corruption, and event system edge cases.",
        "agent_type": "tester",
        "priority": "HIGH",
        "effort_hours": 16,
        "complexity": "high",
        "dependencies": ["TEST-001"],
        "blocks": [],
        "files": [
          {
            "path": "tests/agents/BaseAgent.edge-cases.test.ts",
            "action": "create",
            "description": "New comprehensive edge case test suite for BaseAgent"
          }
        ],
        "success_criteria": [
          "All edge case tests pass",
          "100% coverage of hook failure scenarios",
          "Concurrent operation safety verified",
          "State corruption handling tested"
        ],
        "validation": "npm test -- --testPathPattern=\"BaseAgent.edge-cases.test.ts\"",
        "estimated_impact": "Validates core agent reliability under edge conditions"
      },

      {
        "task_id": "AF-001",
        "sprint": "sprint-3-optional",
        "phase": "advanced-features",
        "title": "Create Enhanced Multi-Model Router",
        "description": "Extend router from 4 models to 100+ with 5-tier architecture (Flagship, Cost-Effective, Budget, Local, Ultra-Budget) for 85-90% cost savings.",
        "agent_type": "coder",
        "priority": "HIGH",
        "effort_hours": 24,
        "complexity": "high",
        "dependencies": [],
        "blocks": [],
        "roi_annual": 51000,
        "files": [
          {
            "path": "src/routing/EnhancedModelRouter.ts",
            "action": "create",
            "description": "5-tier model router with 100+ models"
          },
          {
            "path": "src/config/models.config.ts",
            "action": "create",
            "description": "Model tier configuration and OpenRouter integration"
          },
          {
            "path": "tests/routing/EnhancedModelRouter.test.ts",
            "action": "create",
            "description": "Comprehensive router tests"
          }
        ],
        "success_criteria": [
          "100+ models supported",
          "85-90% cost savings achieved",
          "Budget enforcement working",
          "Fallback chain operational"
        ],
        "validation": "Run cost comparison test: 1000 tests, verify 85-90% savings",
        "estimated_impact": "$51,000/year cost savings"
      },

      {
        "task_id": "AF-002",
        "sprint": "sprint-3-optional",
        "phase": "advanced-features",
        "title": "Integrate Phi-4 ONNX Local Model",
        "description": "Download and integrate Phi-4 ONNX model for local, offline, zero-cost test generation.",
        "agent_type": "coder",
        "priority": "HIGH",
        "effort_hours": 16,
        "complexity": "high",
        "dependencies": ["AF-001"],
        "blocks": [],
        "roi_annual": 10000,
        "files": [
          {
            "path": "src/models/Phi4ONNXRunner.ts",
            "action": "create",
            "description": "Local ONNX inference runner"
          },
          {
            "path": "models/phi-4.onnx",
            "action": "download",
            "description": "Phi-4 ONNX model file"
          },
          {
            "path": "tests/models/Phi4ONNXRunner.test.ts",
            "action": "create",
            "description": "Local model tests"
          }
        ],
        "success_criteria": [
          "Local model runs offline",
          "Zero API cost for offline operations",
          "Quality ≥75%"
        ],
        "validation": "Run test generation in offline mode, verify zero API calls",
        "estimated_impact": "$10,000/year savings + offline capability"
      },

      {
        "task_id": "AF-007",
        "sprint": "sprint-3-optional",
        "phase": "advanced-features",
        "title": "Implement QUIC Transport Layer",
        "description": "Replace TCP/HTTP with QUIC protocol for 50-70% faster agent coordination with 0-RTT reconnection and 100+ concurrent streams.",
        "agent_type": "coder",
        "priority": "MEDIUM",
        "effort_hours": 40,
        "complexity": "high",
        "dependencies": [],
        "blocks": ["AF-008"],
        "roi_annual": 10800,
        "files": [
          {
            "path": "src/transport/QUICTransport.ts",
            "action": "create",
            "description": "QUIC transport implementation"
          },
          {
            "path": "tests/transport/QUICTransport.test.ts",
            "action": "create",
            "description": "QUIC transport tests"
          }
        ],
        "success_criteria": [
          "QUIC operational",
          "50-70% latency reduction vs TCP",
          "0-RTT reconnection working",
          "100+ concurrent streams supported"
        ],
        "validation": "Benchmark latency vs TCP, test 0-RTT reconnection, verify 100+ streams",
        "estimated_impact": "$10,800/year savings + 50-70% faster coordination"
      },

      {
        "task_id": "AF-008",
        "sprint": "sprint-3-optional",
        "phase": "advanced-features",
        "title": "Integrate QUIC with EventBus",
        "description": "Enhance EventBus with QUIC support while maintaining TCP/HTTP fallback for compatibility.",
        "agent_type": "coder",
        "priority": "MEDIUM",
        "effort_hours": 24,
        "complexity": "medium",
        "dependencies": ["AF-007"],
        "blocks": [],
        "roi_annual": 10800,
        "files": [
          {
            "path": "src/core/EventBus.ts",
            "action": "update",
            "description": "Add QUIC transport support with TCP fallback"
          }
        ],
        "success_criteria": [
          "QUIC integration complete",
          "Fallback to TCP works",
          "Latency reduced 50-70%",
          "100+ concurrent subscribers supported"
        ],
        "validation": "Test event emission with QUIC, verify fallback, measure latency",
        "estimated_impact": "50-70% faster agent coordination"
      },

      {
        "task_id": "AF-009",
        "sprint": "sprint-3-optional",
        "phase": "advanced-features",
        "title": "Build Rust/WASM Booster Module",
        "description": "Create Rust/WASM module for 352x faster template expansion, pattern application, and bulk transformations.",
        "agent_type": "coder",
        "priority": "MEDIUM",
        "effort_hours": 40,
        "complexity": "high",
        "dependencies": [],
        "blocks": ["AF-010"],
        "roi_annual": 36000,
        "files": [
          {
            "path": "booster/src/lib.rs",
            "action": "create",
            "description": "Rust WASM module with SIMD and Rayon parallelism"
          },
          {
            "path": "booster/Cargo.toml",
            "action": "create",
            "description": "Rust dependencies and build configuration"
          },
          {
            "path": "scripts/build-wasm.sh",
            "action": "create",
            "description": "WASM build script"
          }
        ],
        "success_criteria": [
          "WASM module compiles successfully",
          "1000 templates expand in <1 second",
          "352x speedup achieved vs LLM baseline"
        ],
        "validation": "Benchmark: 1000 templates in <1s, verify SIMD acceleration",
        "estimated_impact": "$36,000/year savings + 352x speedup"
      },

      {
        "task_id": "AF-010",
        "sprint": "sprint-3-optional",
        "phase": "advanced-features",
        "title": "Create TypeScript WASM Wrapper",
        "description": "Create TypeScript wrapper for WASM module with async initialization and method exposure.",
        "agent_type": "coder",
        "priority": "MEDIUM",
        "effort_hours": 16,
        "complexity": "medium",
        "dependencies": ["AF-009"],
        "blocks": ["AF-011", "AF-012"],
        "roi_annual": 36000,
        "files": [
          {
            "path": "src/acceleration/AgentBooster.ts",
            "action": "create",
            "description": "TypeScript wrapper for WASM module"
          },
          {
            "path": "tests/acceleration/AgentBooster.test.ts",
            "action": "create",
            "description": "WASM wrapper tests"
          }
        ],
        "success_criteria": [
          "TypeScript wrapper works correctly",
          "All methods functional (expandTemplate, applyPatterns, bulkTransform)",
          "Performance maintained from WASM"
        ],
        "validation": "Test all WASM methods from TypeScript, verify performance",
        "estimated_impact": "Enables 352x faster operations in TypeScript"
      },

      {
        "task_id": "AF-011",
        "sprint": "sprint-3-optional",
        "phase": "advanced-features",
        "title": "Integrate Booster with TestGeneratorAgent",
        "description": "Add hybrid LLM+WASM mode to TestGeneratorAgent: LLM for creative, WASM for deterministic operations.",
        "agent_type": "coder",
        "priority": "MEDIUM",
        "effort_hours": 24,
        "complexity": "medium",
        "dependencies": ["AF-010"],
        "blocks": [],
        "roi_annual": 36000,
        "files": [
          {
            "path": "src/agents/TestGeneratorAgent.ts",
            "action": "update",
            "description": "Add AgentBooster integration with decision logic"
          }
        ],
        "success_criteria": [
          "Hybrid mode operational (LLM + WASM)",
          "352x speedup for template expansion",
          "100% cost reduction for deterministic patterns",
          "Quality maintained (96%)"
        ],
        "validation": "Generate 1000 tests, verify hybrid mode, measure cost savings",
        "estimated_impact": "$36,000/year savings + 352x speedup"
      },

      {
        "task_id": "AF-012",
        "sprint": "sprint-3-optional",
        "phase": "advanced-features",
        "title": "Optimize Pattern Bank with WASM",
        "description": "Port pattern application to WASM for zero-cost, <1s pattern matching and application.",
        "agent_type": "coder",
        "priority": "LOW",
        "effort_hours": 24,
        "complexity": "medium",
        "dependencies": ["AF-010"],
        "blocks": [],
        "roi_annual": 12000,
        "files": [
          {
            "path": "src/learning/PatternBank.ts",
            "action": "update",
            "description": "Integrate WASM for pattern application"
          }
        ],
        "success_criteria": [
          "Pattern application <1 second (vs 30-60s)",
          "Zero API cost",
          "Quality maintained (85%+ accuracy)"
        ],
        "validation": "Apply 100 patterns to 1000 files, verify <1s completion",
        "estimated_impact": "$12,000/year savings + near-instant patterns"
      }
    ],

    "execution_strategy": {
      "sprint_1_immediate": {
        "duration": "1-2 weeks",
        "critical_path": true,
        "tasks": [
          "DEPLOY-001", "DEPLOY-002", "DEPLOY-003",
          "DEPLOY-004", "DEPLOY-005", "DEPLOY-006", "DEPLOY-007"
        ],
        "parallel_tasks": [
          "TEST-001", "TEST-002", "TEST-003", "TEST-004", "TEST-005"
        ],
        "total_hours": 48,
        "goal": "v1.1.0 Production Ready + 80% Test Coverage"
      },

      "sprint_2_removed": {
        "reason": "Memory system already complete",
        "evidence": "SwarmMemoryManager.ts with 15 tables",
        "time_saved": 60,
        "cost_saved": 9000
      },

      "sprint_3_optional": {
        "duration": "8 weeks",
        "critical_path": false,
        "start_condition": "After v1.1.0 deployment",
        "tasks": [
          "AF-001", "AF-002", "AF-007", "AF-008",
          "AF-009", "AF-010", "AF-011", "AF-012"
        ],
        "total_hours": 168,
        "goal": "85-90% cost savings + 352x faster operations + offline support"
      }
    },

    "coordination_protocol": {
      "agent_communication": "aqe-hooks",
      "memory_partition": "aqe/implementation",
      "event_types": [
        "task.started",
        "task.completed",
        "task.blocked",
        "sprint.completed"
      ],
      "progress_tracking": {
        "method": "SwarmMemoryManager",
        "key_prefix": "implementation/progress/",
        "update_frequency": "per_task_completion"
      }
    },

    "success_metrics": {
      "sprint_1": {
        "deployment_readiness": {
          "test_pass_rate": "100%",
          "coverage_threshold": "80%",
          "critical_bugs": 0,
          "deployment_risk": "LOW"
        },
        "test_infrastructure": {
          "coverage_instrumentation": "working",
          "unit_tests": "passing",
          "edge_cases": "covered"
        }
      },

      "sprint_3_optional": {
        "cost_savings": "85-90%",
        "coordination_speedup": "50-70%",
        "operation_speedup": "352x",
        "offline_support": true
      }
    }
  }
}
